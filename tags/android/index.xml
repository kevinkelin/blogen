<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on KevinYang&#39;s blog</title>
    <link>https://enblog.yangyanxing.com/tags/android.html</link>
    <description>Recent content in android on KevinYang&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 28 Aug 2015 01:17:30 +0000</lastBuildDate><atom:link href="https://enblog.yangyanxing.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use uiautomator&#39;s python package for android UI testing</title>
      <link>https://enblog.yangyanxing.com/article/how-to-use-uiautomator-with-python.html</link>
      <pubDate>Fri, 28 Aug 2015 01:17:30 +0000</pubDate>
      
      <guid>https://enblog.yangyanxing.com/article/how-to-use-uiautomator-with-python.html</guid>
      <description>&lt;p&gt;In a recent project, there is a requirement to perform compatibility tests on applications on at least 100 mobile phones. The first thing that comes to mind is to automate the operation.&lt;/p&gt;
&lt;p&gt;The basic requirements are as follows, install the application under test, start and exit, and then install the test sample to detect whether there is a corresponding pop-up window interception&lt;/p&gt;
&lt;p&gt;Considering the various test frameworks on the market and the programming languages ​​that I am familiar with, I finally chose Google&amp;rsquo;s own uiautomator to do it. With the help of predecessors, it was encapsulated in python, so it was very smooth at the beginning, but the whole process was still There&amp;rsquo;s a lot to be aware of&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
